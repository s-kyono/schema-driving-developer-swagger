plugins {
    id 'maven-publish'
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.5'
}

group= 'package.schema-driving-developer-swagger'
version System.getenv("PACKAGE_VERSION")

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
}

dependencies {
    // Sprint Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Validation dependencies
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok for easier Java conding
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Jackson for JSON parsing
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // openapitools
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    // javax
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    // Springdoc OpenAPI UI
    implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'

}

// tasks.named('test') {
//     useJUnitPlatform()
// }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPckages"
            url = uri("https://maven.pkg.github.com/s-kyono/schema-driving-developer-swagger")
            credentials {
                username = project.findProperty("grp.user") ?: System.getenv("GRP_USER")
                password = project.findProperty("grp.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}